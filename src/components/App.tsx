import {    AppBar,    Box,    Button,    Collapse,    createMuiTheme,    Divider,    Drawer,    IconButton,    List,    ListItem,    ListItemIcon,    ListItemText,    Snackbar,    SvgIcon,    ThemeProvider,    Toolbar,    Typography} from "@material-ui/core";import {Close, ExpandLess, ExpandMore, Menu, Public} from "@material-ui/icons";import RTL from "./RTL";import React, {useEffect, useState} from "react";import BarcodeScanner from "./BarcodeScanner";import {FormattedMessage, IntlProvider, useIntl} from "react-intl";import * as serviceWorkerRegistrationUtils from "../serviceWorkerRegistration";import {ReactComponent as UnitedKingdomSvg} from "../icons/united_kingdom_flag.svg";import {ReactComponent as SaudiArabiaSvg} from "../icons/saudi_arabia_flag.svg";const messagesInArabic = {    title: "باركود سكانر",    camera: "كاميرا",    barcode: "باركود",    serviceWorkerUpdateNotification: "يوجد إصدار أحدث",    update: "تحديث",    language: "اللغه",}const theme = createMuiTheme({    palette: {        primary: {            main: "#d67233"        }    }})const storedLocale = localStorage.getItem("preferredLocale");const browserLocale = (navigator?.languages[0] ?? navigator.language).toString().startsWith("ar") ? "ar" : "en";const initialLocale = storedLocale ?? browserLocale;export default function App() {    const [locale, setLocale] = useState(initialLocale);    const [serviceWorkerRegistration, setServiceWorkerRegistration] = useState<ServiceWorkerRegistration | null>(null);    const [serviceWorkerUpdateAvailable, setServiceWorkerUpdateAvailable] = useState(false);    useEffect(() => {        // Register service worker        console.log(`registering service worker`);        serviceWorkerRegistrationUtils.register({            onUpdate: registration => {                setServiceWorkerRegistration(registration)                setServiceWorkerUpdateAvailable(true);            },            onSuccess: registration => setServiceWorkerRegistration(registration)        });    }, [])    function updateServiceWorker() {        serviceWorkerRegistration?.waiting?.addEventListener("statechange", function () {            if (this.state === "activated") {                window.location.reload();            }        })        serviceWorkerRegistration?.waiting?.postMessage({type: "SKIP_WAITING"});        setServiceWorkerUpdateAvailable(false)    }    function Content(        {            updateAvailable,            setLocale,            updateServiceWorker        }: any    ) {        const intl = useIntl();        const [notificationOpen, setNotificationOpen] = useState(updateAvailable);        const [drawerOpen, setDrawerOpen] = useState(false);        const [languagesCollapseOpen, setLanguagesCollapseOpen] = useState(true)        function handleCloseNotification(reason: string | null) {            if (reason === "clickaway") {                return            }            setNotificationOpen(false);        }        const ThisAppBar = () => (            <AppBar position="static">                <Toolbar>                    <IconButton                        size="small"                        color="inherit"                        onClick={() => setDrawerOpen(!drawerOpen)}                    >                        <Menu fontSize="large"/>                    </IconButton>                    <Box width={32} mx={1}>                        <img src="/logo192.png" alt="logo" width="100%" height="100%"/>                    </Box>                    <Typography variant="h6" noWrap>                        <FormattedMessage                            id="title"                            defaultMessage="Barcode Scanner"                        />                    </Typography>                    <Box m="auto"/>                </Toolbar>            </AppBar>        );        const thisDrawer = (            <Drawer                anchor="left"                open={drawerOpen}                onClose={() => setDrawerOpen(false)}            >                <Box width="256px" dir={intl.locale === "ar" ? "rtl" : "ltr"}>                    <List component="nav">                        <ListItem button onClick={() => setLanguagesCollapseOpen(!languagesCollapseOpen)}>                            <ListItemIcon>                                <Public/>                            </ListItemIcon>                            <ListItemText                                primary={intl.formatMessage({id: "language", defaultMessage: "Language"})}                            />                            {languagesCollapseOpen ? <ExpandLess/> : <ExpandMore/>}                        </ListItem>                        <Collapse in={languagesCollapseOpen} timeout="auto" unmountOnExit>                            <Box pl={3}>                                <List component="div" disablePadding>                                    <ListItem button onClick={() => {                                        localStorage.setItem("preferredLocale", "en");                                        setLocale("en");                                    }}                                    >                                        <ListItemIcon>                                            <SvgIcon                                                component={UnitedKingdomSvg}                                                viewBox="39.41 496.552 76.684 52.932"                                            />                                        </ListItemIcon>                                        <ListItemText primary="English"/>                                    </ListItem>                                    <ListItem button onClick={() => {                                        localStorage.setItem("preferredLocale", "ar");                                        setLocale("ar");                                    }}                                    >                                        <ListItemIcon>                                            <SvgIcon                                                component={SaudiArabiaSvg}                                                viewBox="150.349 55.307 76.236 52.932"                                            />                                        </ListItemIcon>                                        <ListItemText primary="عربي"/>                                    </ListItem>                                </List>                            </Box>                        </Collapse>                        <Divider/>                    </List>                </Box>            </Drawer>        )        const thisSnackBar = (            <Snackbar                open={notificationOpen}                onClose={(event, reason) => handleCloseNotification(reason)}                message={intl.formatMessage({                    id: "serviceWorkerUpdateNotification", defaultMessage: "Newer version available"                })}                action={                    <>                        <Button                            color="secondary"                            size="small"                            onClick={() => updateServiceWorker()}                        >                            <FormattedMessage                                id="update"                                defaultMessage="Update"                            />                        </Button>                        <IconButton                            color="inherit"                            size="small"                            onClick={() => handleCloseNotification(null)}                        >                            <Close/>                        </IconButton>                    </>                }            />        );        return <>            <ThisAppBar/>            {thisDrawer}            <BarcodeScanner/>            {thisSnackBar}        </>;    }    const AppContent = () => (        <Content            setLocale={setLocale}            updateAvailable={serviceWorkerUpdateAvailable}            updateServiceWorker={updateServiceWorker}        />    )    if (locale === "ar") {        return (            <IntlProvider locale={"ar"} messages={messagesInArabic} defaultLocale="en">                <ThemeProvider theme={theme}>                    <Box dir="rtl">                        <RTL>                            <AppContent/>                        </RTL>                    </Box>                </ThemeProvider>            </IntlProvider>        )    } else {        return (            <IntlProvider locale={"en"} defaultLocale="en">                <ThemeProvider theme={theme}>                    <Box>                        <AppContent/>                    </Box>                </ThemeProvider>            </IntlProvider>        )    }}